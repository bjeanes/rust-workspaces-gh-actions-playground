# TODO: incorporate some learnings from https://www.infinyon.com/blog/2021/04/github-actions-best-practices/, esp `sccache` stuff
# TODO: dispatch event technique from https://mateuscosta.me/rust-releases-with-github-actions looks handy for triggering another workflow, such as to share logic for building binaries
# https://github.com/Smithay/input.rs/actions/runs/906977788/workflow#L175I

name: CI
on:
  push:
    branches:
      - '**'

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master

  #     - uses: actions-rs/toolchain@v1
  #       id: rust-toolchain
  #       with:
  #         toolchain: stable
  #         profile: default
  #         override: true

  #     - name: Install Dependencies
  #       run: |
  #         export DEBIAN_FRONTEND=noninteractive
  #         sudo apt-get clean && sudo apt-get update
  #         sudo apt-get install -y pkg-config  libudev-dev

  #     - name: Cache cargo registry
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.cargo/registry
  #         key: ${{ runner.os }}-cargo-registry-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-registry-
  #     - name: Cache cargo index
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.cargo/git
  #         key: ${{ runner.os }}-cargo-index-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-index-
  #     - name: Cache cargo build
  #       uses: actions/cache@v1
  #       with:
  #         path: target
  #         key: ${{ runner.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-
  #           ${{ runner.os }}-cargo-build-target-

  #     - name: Run tests
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: test
  #         args: --verbose

  # checks:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@master

  #     - uses: actions-rs/toolchain@v1
  #       id: rust-toolchain
  #       with:
  #         toolchain: stable
  #         profile: default
  #         override: true

  #     - name: Install Dependencies
  #       run: |
  #         export DEBIAN_FRONTEND=noninteractive
  #         sudo apt-get clean && sudo apt-get update
  #         sudo apt-get install -y pkg-config  libudev-dev

  #     - name: Cache cargo registry
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.cargo/registry
  #         key: ${{ runner.os }}-cargo-registry-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-registry-${{ steps.rust-toolchain.outputs.rustc_hash }}-
  #           ${{ runner.os }}-cargo-registry-
  #     - name: Cache cargo index
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.cargo/git
  #         key: ${{ runner.os }}-cargo-index-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-index-${{ steps.rust-toolchain.outputs.rustc_hash }}-
  #           ${{ runner.os }}-cargo-index-
  #     - name: Cache cargo build
  #       uses: actions/cache@v1
  #       with:
  #         path: target
  #         key: ${{ runner.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-
  #           ${{ runner.os }}-cargo-build-target-

  #     - name: Check rustfmt
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: fmt
  #         args: --all -- --check

  #     - name: Check clippy warnings
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: clippy
  #         args: -- -D clippy::all

  build:
    # needs: test
    if: github.event.ref == 'refs/heads/main'
    name: Build ${{matrix.target}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          # - { os: ubuntu-22.04, toolchain: stable, target: x86_64-unknown-linux-gnu }
          - { os: ubuntu-22.04, toolchain: stable, target: aarch64-unknown-linux-gnu, cross: true }
          # - { os: ubuntu-22.04, toolchain: stable, target: x86_64-unknown-linux-musl, cross: true }
          - { os: ubuntu-22.04, toolchain: stable, target: arm-unknown-linux-gnueabi, cross: true }
          - { os: ubuntu-22.04, toolchain: stable, target: armv7-unknown-linux-gnueabihf, cross: true }

          # MacOS
          # - { os: macos-12, toolchain: stable, target: x86_64-apple-darwin }
          # - { os: macos-12, toolchain: stable, target: aarch64-apple-darwin }

          # # Windows
          # - { os: windows-2022, toolchain: stable-x86_64-pc-windows-gnu, target: x86_64-pc-windows-gnu }
          # - { os: windows-2022, toolchain: stable-x86_64-pc-windows-msvc, target: x86_64-pc-windows-msvc }

    steps:
      - uses: actions/checkout@master

      - uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
          default: true

      - name: Install Dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get clean && sudo apt-get update
          sudo apt-get install -y pkg-config dpkg-dev

      # - name: Setup linux toolchain
      #   if: contains(matrix.target, '-linux-') && startsWith(matrix.target, 'x86_64-')
      #   run: |
      #     sudo apt-get install -qqy libudev-dev

      # https://github.com/Smithay/input.rs/blob/1d83b2e86/.github/workflows/ci.yml#L186-L219
      - name: Setup linux toolchain
        if: contains(matrix.target, '-linux-') && !startsWith(matrix.target, 'x86_64-')
        run: |
          case "${{ matrix.target }}" in
            i686-*) SYSTEM_ARCH=i386 ;;
            arm*) SYSTEM_ARCH=armhf ;;
            aarch64*) SYSTEM_ARCH=arm64 ;;
          esac
          GCC_TARGET=$(printf "${{ matrix.target }}" | sed 's/-unknown-/-/' | sed 's/arm[^-]*/arm/g')
          ENV_TARGET=$(printf "${{ matrix.target }}" | tr '-' '_')
          ENV_TARGET_UC=$(printf "${ENV_TARGET}" | tr '[[:lower:]]' '[[:upper:]]')
          sudo rm -f /etc/apt/sources.list.d/*.list
          case "${{ matrix.target }}" in
            arm* | aarch64*)
          sudo tee /etc/apt/sources.list << EOF
          deb [arch=i386,amd64] http://archive.ubuntu.com/ubuntu/ focal main universe
          deb [arch=i386,amd64] http://archive.ubuntu.com/ubuntu/ focal-updates main universe
          deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ focal-security main universe
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ focal main universe
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ focal-updates main universe
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ focal-security main universe
          EOF
              ;;
          esac
          sudo dpkg --add-architecture ${SYSTEM_ARCH}
          dpkg --print-foreign-architectures
          sudo apt-get update -qqy
          # sudo apt-get dist-upgrade -qqy --fix-broken
          # sudo apt-get install -qqy --fix-broken -o Debug::pkgProblemResolver=yes gcc-${GCC_TARGET} pkg-config-${GCC_TARGET}
          sudo apt-get install -qqy gcc-${GCC_TARGET} pkg-config-${GCC_TARGET}
          echo "SYSTEM_ARCH=${SYSTEM_ARCH}" >> $GITHUB_ENV
          echo "CARGO_TARGET_${ENV_TARGET_UC}_LINKER=${GCC_TARGET}-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_${ENV_TARGET}=${GCC_TARGET}-pkg-config" >> $GITHUB_ENV
          echo "PKG_CONFIG=${GCC_TARGET}-pkg-config" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=\"-L/usr/lib/${GCC_TARGET} -L/lib/${GCC_TARGET}\"" >> $GITHUB_ENV

      - name: Install Linux dependencies
        if: contains(matrix.target, '-linux-')
        run: |
          printf "%s${SYSTEM_ARCH+:${SYSTEM_ARCH}}" libudev-dev | xargs sudo apt-get install -qqy --no-install-recommends

      # # I shouldn't _have_ to do this, since the rust-toolchain knows the target, but I am getting the following on ARM architectures:
      # #
      # #   /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.29' not found
      # #
      # # It's clearly trying to link x86_64 libc even when
      # - name: Install gcc toolchain for architecture
      #   if: matrix.cross && contains(matrix.target, 'arm')
      #   run: |
      #     export DEBIAN_FRONTEND=noninteractive
      #     sudo apt-get install -y 'gcc-arm-linux.*'

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ matrix.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ matrix.target}}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ matrix.target}}-
            ${{ matrix.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
            ${{ matrix.os }}-cargo-build-target-${{ steps.rust-toolchain.outputs.rustc_hash }}-
            ${{ matrix.os }}-cargo-build-target-
            ${{ runner.os }}-cargo-build-target-

      - name: Build release asset
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }}

      # - name: Package asset as gzip
      #   if: "!startsWith(matrix.os, 'windows')"
      #   run: env GZIP=-9 tar zvcf modbus-mqtt.tar.gz -C ./target/${{ matrix.target }}/release modbus-mqtt

      # - name: Package asset as zip
      #   if: startsWith(matrix.os, 'windows')
      #   run: |
      #     Compress-Archive -LiteralPath .\target\${{ matrix.target }}\release\modbus-mqtt.exe -DestinationPath modbus-mqtt.zip

      # - name: Upload gzipped artifact
      #   if: "!startsWith(matrix.os, 'windows')"
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: modbus-mqtt-${{ matrix.target }}.tar.gz
      #     path: modbus-mqtt.tar.gz

      # - name: Upload zipped artifact
      #   if: startsWith(matrix.os, 'windows')
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: modbus-mqtt-${{ matrix.target }}.zip
      #     path: modbus-mqtt.zip
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: modbus-mqtt-${{ matrix.target }}
          path: modbus-mqtt

  # TODO: skip if ${{ github.sha }} can be `git describe`d as an exact version
  #       tag (we'll release that separately)
  prerelease:
    name: Create a pre-release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download built assets from workflow artifacts
        uses: actions/download-artifact@v2
        with:
          path: assets/

      - name: Set release version variable
        id: version
        run: |
          echo ::set-output name=version::`git describe --long --always --tags --exclude unstable`

      # This generates a space-sparated list of `$asset_name:assets/$file_name/$file_name`
      # strings by modifying the file_name to include the release version set
      # above.
      #
      # The `actions/download-artifact` action puts each artifact in its own
      # directory, even when it is a single file.
      - name: Build list of artifacts
        id: artifacts
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          files=$(ls -1 assets | perl -Wpe 's/^(modbus-mqtt)-(.*)$/$1-unstable-'$VERSION'-$2:assets\/$&\/*/g')
          echo ::set-output name=files::`echo $files | xargs echo`

      # Deleting the release and tag to work around some downsides of the
      # meeDamian/github-release approach:
      #
      # 1. Tag is left pointing to the original release
      # 2. Release is updated but its timestamp will be the time of original release
      #
      # Simply deleting the tag (e.g. `git push --delete origin unstable`) will
      # work from a public-facing standpoint, but it leaves behind a lot of
      # draft releases for the releases which were associated with the tag at
      # the time it was deleted.
      - name: Delete `unstable` tag and associated GH Release
        uses: dev-drprasad/delete-tag-and-release@v0.1.2
        with:
          delete_release: true
          tag_name: unstable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Extract latest changelog entry
      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v1.1.0

      # Upserts the pre-release
      - name: Create GH Release and `unstable` tag for current commit
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allow_override: true
          prerelease: true
          tag: unstable
          commitish: ${{ github.sha }}
          name: "Latest unstable build"
          body: ${{ steps.changelog_reader.outputs.log_entry }}
          files: ${{ steps.artifacts.outputs.files }}
          gzip: false
